#               Тестирование и отладка.


# Тестирование и отладка играют важную роль в разработке приложений, 

# чтобы убедиться, что они функционируют корректно и соответствуют требованиям. 

# Вот некоторые этапы, которые следует учесть при тестировании и отладке:

#                      1. Планирование тестирования: 

# Любой специалист, который задействован в проекте, так или иначе планирует работу. Когда утром 
# открывает систему, где написаны тикеты и задачи, а их всегда много, то в первую очередь их 
# приоритезирует. Продумывает, что нужно сделать быстрее, а что может подождать. Уже на этом этапе 
# распределения работы происходит планирование. Этот процесс может быть ограничен рамками, например, 
# текущего дня и исключительно своих задач.

# Но бывают и другие ситуации. Допустим, работа организована по Scrum. В таком случае тестировщику 
# нужно определить, что он успеет сделать за итерацию. Причём в самом её начале. Например, разработчики 
# запланировали сделать десять User stories. Что обычно делают тестировщики? Говорят: всё хорошо, ждём. 
# По факту получается, что за два дня до окончания итерации тестировщик получает огромное количество 
# работы. Начинается настоящий пожар: за что хвататься?

# Чтобы такого не было, на старте тестировщику нужно посмотреть, что это за User stories – уточнить у 
# разработчиков, в какие сроки они будут выполнены, оценить объём работы. Если видит, что времени 
# будет не хватать, и он не сможет протестировать все User stories, то нужно оговорить эти моменты.
# Никто не запрещает предложить разработчикам сделать меньше, а в остальное время пофиксить баги. 
# Так работа будет выполнена в оптимальные сроки, а тестировщик не столкнется с лавиной задач. 
# Это уже совместное планирование работы с командой.

# Ещё один пример: приходит заказчик и говорит, что 18 числа будет демо для инвесторов – необходимо 
# показать некоторые фичи. Тестировщику нужно продумать, успеет ли он к этому сроку их протестировать. 
# Нередко бывает такое, что 18-ое – это уже завтра. Что делать в таком случае? Здесь важно правильно 
# расставить приоритеты: идти вширь и протестировать как можно больше или углубиться в тестирование 
# отдельных фич. Писать при этом тест-кейсы или обойтись чек-листом. Есть разные ситуации, 
# с которыми в процессе работы сталкивается тестировщик, и когда возникает необходимость в планировании. 
# И чем больше техник и методик знает тестировщик, тем эффективнее сможет это делать.

# Подходы в тестировании и уместность их применения

# О каких подходах идёт речь? Тестирование может проходить по написанным сценариям  
# (Scripted testing), когда мы сначала пишем тест-кейсы или тест-скрипты, если речь идёт про 
# автоматизацию, и потом действуем по ним. Но не всегда такой подход применим. Сейчас всё чаще 
# говорят про Agile-разработку, для которой лучше применять Agile-тестирование. Оно заключается в том, 
# что мы получаем фичу и сразу тестируем её,  изучаем отклик, который она даёт, и придумываем новые 
# проверки. Получается такое постоянное тестирование – анализ полученных результатов, баг-репортинг, 
# продумывание новых проверок и опять тестирование. Тестовая документация при этом описывается в виде 
# test session reports – коротких отчётов о проделанной работе и тех проблемах, которые были выявлены 
# в процессе.  

# Важно понимать, как лучше действовать в той или иной ситуации. И если тестировщик знает различные 
# виды и уровни тестирования, то может выбирать – пойти по уровням или отдельным видам, писать 
# тест-кейсы или только чек-листы, составлять диаграммы или генерировать матрицы, где можно просто 
# поставить галочки и крестики. Чем больше у специалиста знаний, тем гибче он в своём планировании 
# и эффективнее достигает цели.

# На курсе «Оценка трудозатрат и планирование тестирования» мы будем разбирать, по каким признакам 
# понять, какая методика подходит лучше, какой вид тестирования может быть применён в зависимости от 
# фичей и целей, как может варьироваться тестовая документация, как понять, что важно для заказчика, 
# и так далее.

# Ошибки при планировании и риски в тестировании

# При планировании многие тестировщики действуют по наитию, поэтому не исключены ошибки. Я бы хотела 
# остановиться на трёх самых распространённых.

# Неумение обосновывать свою позицию. Когда тестировщик оценил фронт работы и установил срок, за 
# который протестирует фичи, заказчик может поинтересоваться: почему потребуется так много времени? 
# Первая реакция тестировщика, особенно того, у кого опыт работы ещё небольшой: попробуем ужаться! 
# Но ведь никто не просил этого делать – нужно уметь обосновывать свою позицию. Тестировщики пугаются, 
# что заложили слишком много времени. Или попросту боятся сказать заказчику, что на выполнение работы 
# понадобится, например, месяц.

# Оценивать срок выполнения работы «на глаз». Ещё один показательный пример неправильного 
# планирования – тестировщик, не вникнув в детали задачи, сходу говорит, что на выполнение работы нужна 
# неделя. Я, как руководитель, спрашиваю, почему выбран такой срок. В ответ нередко слышу что-то из 
# разряда «начну, а там разберусь». Но такую работу эффективной назвать сложно, если сам специалист не 
# понимает, сколько времени у него уходит на то или иное задание. Каждая цифра в оценке должна быть 
# обоснована.

# Компенсировать риски дополнительным временем. Часто в оценку времени на выполнение задачи добавляют 
# дополнительные часы или дни, так сказать, «на всякий случай». Мало ли что может случиться. 
# Но бывают такие моменты, которые невозможно предусмотреть на старте. Случай из моей практики: 
# нужно было протестировать фичу, на что мы отвели два дня. При этом доступ в систему ждали целый месяц! 
# Это предусмотреть было просто невозможно. И если бы мы действовали с помощью добавления времени, 
# его всё равно оказалось бы мало. Поэтому такой подход не работает. Другой пример: на проект 
# добавили нового разработчика, который ещё не знаком с системой. Вероятность того, что в его фиче 
# будет много багов, очень высокая. Этот риск можно учесть в самом начале. И если риск оправдается, 
# надо сразу пересмотреть оценку и спланировать тестирование заново.

# Риски бывают разных уровней (высокий, средний, низкий). Тестировщику нужно уметь правильно 
# перестраивать работу в зависимости от ситуации и реализовавшихся рисков. На курсе мы будем учиться 
# предусматривать риски в тестировании и проработаем разные варианты действий. Всегда, когда риск 
# реализовался, нужно остановиться и перепланировать работу с учётом новых вводных.

# Определите стратегию тестирования, включая критерии приемочного тестирования, 

# области тестирования и ресурсы, необходимые для выполнения тестов. 

# Разработайте тест-план, который описывает основные 

# сценарии тестирования и ожидаемые результаты.

#                      2. Разработка тестовых случаев: 

# Тест-кейс — это профессиональная документация тестировщика, последовательность действий направленная 
# на проверку какого-либо функционала, описывающая как прийти к фактическому результату.

# Набор тест-кейсов называют тест-комплектом. Иногда тест-набор путают с тест-планом. Тест-план 
# описывает какие работы, как и когда должны быть проведены в рамках тестирования продукта, 
# а так же что необходимо для их выполнения.

# Зачем нужны тест-кейсы?

# Тест-кейсы должен помочь нам провести проверку продукта без ознакомления с всей документацией. 
# Написанный один раз, удобный в поддержке тест-кейс сэкономит много времени и сил тестировщикам.

# Атрибуты тест-кейса

# Любой тест-кейс обязательно включает в себя:

# Уникальный идентификатор тест-кейса — необходим для удобной организации хранения и навигации по 
# нашим тест-наборам.
# Название — основная тема, или идея тест-кейса. Кратное описание его сути.
# Предусловия — описание условий, которые не имеют прямого отношения к проверяемому функционалу, 
# но должны быть выполнены.
# Например, оставить комментарий на вашем портале может только зарегистрированный пользователь. 
# Значит для тест-кейса «Создание комментария» будет необходимо выполнение предусловия «пользователь 
# зарегистрирован», и «пользователь авторизован»
# Шаги — описание последовательности действий, которая должна привести нас к ожидаемому результату
# Ожидаемый результат — результат: что мы ожидаем увидеть после выполнения шагов.


# Не обязательно, но желательно добавить в тест-кейс атрибут история редактирования — это сильно 
# облегчит вам жизнь. Лаконичный журнал изменений, где отраженно: кем, как, и когда был изменен 
# тест-кейс.

# Что еще необходимо знать, перед созданием тест-кейса?

# Во-первых, каждый выполненный тест-кейс, дает нам один из трех результатов:

# 1.Положительный результат, если фактический результат равен ожидаемому результату,
# 2.Отрицательный результат, если фактический результат не равен ожидаемому результату. 
# В этом случае, найдена ошибка.
# 3.Выполнение теста блокировано, если после одного из шагов продолжение теста невозможно. 
# В этом случае так же, найдена ошибка.

# Во-вторых, одним тест-кейсом проверяется одна конкретная вещь, и для этой вещи должен быть 
# только один ожидаемый результат.

# Чего не должно быть в тест-кейсе

# 1. Зависимостей от других тест-кейсов;
# 2. Нечеткой формулировки шагов или ожидаемого результата;
# 3. Отсутствия необходимой для прохождения тест-кейса информации;
# 4. Излишней детализации.

# Первого следует избегать, потому что: связанный тест-кейс всегда может быть удален из-за ненадобности 
# или он может быть изменен, в этом случае, станет непонятно как исполнить тест-кейс в которому, есть 
# ссылки.

# Так же из-за зависимости тест-кейсов, может возникнуть ощущение, что тестируемый продукт уже 
# приведет к нужному состоянию благодаря выполнению связанных тест-кейсов.

# Со вторым думаю все ясно. Если описание шагов или ожидаемое результата будет не четким, то это 
# блокирует прохождение тест-кейса.

# В тест-кейса должно быть вся информация, которая необходима для его прохождения. Например, если 
# мы проверяем окно логина на сайте, значит нам понадобится логин и пароль, иначе прохождение этого 
# сценария будет невозможно.

# Так же не следует слишком детализировать кейс. Например, если мы проверяем возможность создания 
# комментария, то не стоит писать в каком угле экрана должно быть окно логина. Избыточная информация 
# только затрудняет прохождение тест-кейса.

# Определите конкретные тестовые случаи для проверки различных аспектов приложения,
 
# включая функциональность, граничные условия и возможные ошибки. 

# Убедитесь, что тестовые случаи охватывают все основные функции 

# и возможные варианты использования.

#                      3. Выполнение тестов: 

# Запустите тестовые случаи и записывайте результаты. 

# Проверьте, выполняется ли каждый тестовый случай в соответствии 

# с ожидаемыми результатами. Если обнаружены проблемы или ошибки,
 
# зарегистрируйте их и запустите отладку.

#                   4. Отладка: 

# Если тесты раскрывают ошибки или некорректное поведение приложения, 

# приступите к отладке. 

# Используйте инструменты отладки, чтобы идентифицировать 

# и исправить проблемные моменты. Проанализируйте стек вызовов, 

# проверьте значения переменных и используйте другие методы для 

# локализации и устранения ошибок.

#                  5. Регрессионное тестирование: 

# Регрессио́нное тести́рование (англ. regression testing ← лат. regressio «движение назад, возврат, отход»)
# — собирательное название для всех видов тестирования программного обеспечения, направленных на 
# обнаружение ошибок в уже протестированных участках исходного кода. Такие ошибки — когда после 
# внесения изменений в программу, перестаёт работать то, что должно было продолжать работать, — называют 
# регрессионными ошибками (англ. regression bugs).

# Регрессионное тестирование (по некоторым[каким?] источникам) включает new bug-fix — проверка 
# исправления вновь найденного дефекта, old bug-fix — проверка, что исправленный ранее и 
# верифицированный дефект не воспроизводится в системе снова, а также side-effect — проверка того, 
# что не нарушилась работоспособность работающей ранее функциональности, если её код мог быть затронут 
# при исправлении некоторых дефектов в другой функциональности. Обычно используемые методы 
# регрессионного тестирования включают повторные прогоны предыдущих тестов, а также проверки, не 
# попали ли регрессионные ошибки в очередную версию в результате слияния кода.

# Из опыта разработки ПО известно, что повторное появление одних и тех же ошибок — случай достаточно 
# частый. Иногда это происходит из-за слабой техники управления версиями или по причине человеческой 
# ошибки при работе с системой управления версиями. Но настолько же часто решение проблемы бывает 
# «недолго живущим»: после следующего изменения в программе решение перестаёт работать. И наконец, 
# при переписывании какой-либо части кода часто всплывают те же ошибки, что были в предыдущей реализации.

# Поэтому считается хорошей практикой при исправлении ошибки создать тест на неё и регулярно прогонять 
# его при последующих изменениях программы. Хотя регрессионное тестирование может быть выполнено и 
# вручную, но чаще всего это делается с помощью специализированных программ, позволяющих выполнять все 
# регрессионные тесты автоматически. В некоторых проектах даже используются инструменты для 
# автоматического прогона регрессионных тестов через заданный интервал времени. Обычно это выполняется 
# после каждой удачной компиляции (в небольших проектах) либо каждую ночь или каждую неделю.

# Регрессионное тестирование является неотъемлемой частью экстремального программирования. 
# В этой методологии проектная документация заменяется на расширяемое, повторяемое и автоматизированное 
# тестирование всего программного пакета на каждой стадии процесса разработки программного обеспечения.

# После исправления ошибок проведите регрессионное тестирование, 

# чтобы проверить, что исправления не вызвали новые 

# проблемы в других частях приложения. 

# Запустите ранее пройденные тестовые случаи и проверьте их результаты.

#                6. Тестирование граничных условий: 

# Техника анализа граничных значений — это техника проверки поведения продукта на крайних (граничных) 
# значениях входных данных.
# Граничное тестирование также может включать тесты, проверяющие поведение системы на входных данных, 
# выходящих за допустимый диапазон значений. При этом система должна определённым (заранее оговоренным) 
# способом обрабатывать такие ситуации.
# Использование граничных значений в тестировании помогает выявлять ошибки, связанные с обработкой 
# граничных условий.
# Алгоритм использования техники граничных значений:
# Выделить классы эквивалентности;
# Определить граничные значения этих классов;
# Провести тесты по проверке значения до границы, на границе и сразу после границы.
# Количество тестов для проверки граничных значений будет равен количеству границ, умноженному на 3.

# Удостоверьтесь, что ваше приложение справляется с экстремальными 

# или крайними значениями входных данных. 

# Проведите тесты с минимальными и максимальными значениями, 

# пороговыми значениями и необычными входами, чтобы убедиться, 

# что приложение обрабатывает такие ситуации правильно.

#              7. Тестирование производительности: 

# Тестирование производительности (англ. Performance Testing) в инженерии программного 
# обеспечения — тестирование, которое проводится с целью определения, как быстро работает 
# вычислительная система или её часть под определённой нагрузкой. Также может служить для проверки и 
# подтверждения других атрибутов качества системы, таких как масштабируемость, надёжность и потребление 
# ресурсов.
# Тестирование производительности — это одна из сфер деятельности развивающейся в области информатики 
# инженерии производительности, которая стремится учитывать производительность на стадии моделирования 
# и проектирования системы, перед началом основной стадии кодирования.

# Если ваше приложение требует высокой производительности, 

# проведите тестирование производительности для оценки его скорости и эффективности. 

# Исследуйте, как приложение работает при разной нагрузке 

# и объеме данных и оптимизируйте его, если необходимо.

#              8. Документирование результатов: 

# Запишите результаты тестирования, включая обнаруженные ошибки,
 
# исправления и результаты прохождения тестов. 

# Это позволит вам отслеживать и контролировать прогресс тестирования 

# и обеспечить качество вашего приложения.

# Помните, что процесс тестирования и отладки может потребовать 

# множество итераций, особенно при разработке сложных приложений. 

# Будьте готовы тщательно проверять и отлаживать ваше приложение 

# до достижения нужного уровня качества и функциональности.