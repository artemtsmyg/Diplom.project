#               Выбор языка программирования и среды разработки.


# При выборе языка программирования и среды разработки для реализации приложения 

# стоит учитывать несколько факторов:

#                  1. Требования проекта: 

# Оказывается, у бизнесменов и программистов есть один общий профессиональный инструмент, содержащий 
# набор опций, подстраиваемых под любые задачи, — фреймворк. Это особый, содержащий комплексный свод 
# информации, «конструктор», используемый для качественного описания и эффективной систематизации 
# крупных проектов!

# Можно поступить, конечно, проще: например, применить CMS-систему для запуска нового сайта или просто 
# ориентироваться по готовому сценарию приобретенной франшизы. Но типовой план управления требованиями 
# из готового движка или кем-то когда-то составленной инструкции по франшизе — не универсальное решение, 
# особенно если речь заходит об индивидуальных и/или особо масштабных проектах, требующих вдумчивого 
# подхода и нестандартных приемов. В таких случаях и приходят на помощь «каркасные» фреймворки, 
# прекрасно адаптирующиеся под клиентские запросы.

# Как органично настраиваемый «конструктор» справляется с управленческой ролью? Рассмотрим на 
# примере PMBoK — международном документе, практическом руководстве, позволяющем запускать проекты 
# любой сложности!

# Знакомимся с PMBoK
# Англоязычная аббревиатура PMBoK зашифровала четыре слова, отражающих суть этого фреймворка:

# Project;
# Management;
# Body;
# Knowledge.
# Дословный перевод оригинала понятен даже тем, кто плохо знает иностранный язык: «Свод знаний для 
# управления проектом».

# Любопытно, что автором и куратором этого подспорья для бизнеса выступает PMI — некоммерческий 
# институт, специализирующийся на управленческих проектах в принципе.

# Целевая аудитория может получить «Свод» на почти всех языках (в том числе на русском) и в двух 
# версиях:

# обычной печатной;
# электронной.
# На сегодня актуально седьмое издание.

# Важные нюансы
# Объем PMBoK составляет более 600 страниц на английском, что превышает разработанный Американским 
# национальным институтом стандартов объем отраслевого стандарта управления проектами! 
# При этом оба руководства — от Project Management Institute и от ANSI — взаимно согласованны в том, 
# что касается управления проектами.

# Еще одна особенность фреймворка в том, что он не является стандартом. PMBoK — это объемный, дешевый, 
# доступный к пониманию неспециалистами и весьма детализированный документ, составленный из 
# рекомендуемых, а не общеобязательных правил грамотного поведения.

# Оригинал распространяется платно в книжных магазинах и на официальном сайте проекта PMI.

# Наконец, рассчитанный на форсированное использование «Свод» не носит методологического характера. 
# Однако на основе этого документа разрабатываются готовые к применению бизнес-решения, 
# в том числе подходящие для Agile-команд.

# План управления требованиями PMBoK: что же это такое
# Это одна из структурных частей фреймворка, а точнее — второй раздел плана управления проектом! 
# Тематически Requirements Management Plan (т. е. план управления требованиями) относится к группе 
# процессов планирования, содержащихся в многостраничном руководстве PMBoK.

# Сам план управления требованиями содержит общую информацию, касающуюся таких вопросов контроля 
# исполнения проекта, как анализ и документирование, авторство и порядок разработки требований, 
# их согласование и утверждение, а также сопоставление с цикличностью проекта и своевременность 
# корректировки требований в связи с изменяющейся действительностью.

# Принципы формирования требований планирования
# О главной цели планирования проекта догадаться несложно, как и о значении соблюдения требований 
# реализации плана. Если на стадии его составления допускаются ошибки — они могут стать причиной 
# неэффективности проекта, даже если для него были задействованы все возможные ресурсы.

# Не меньшей фатальностью станет для проекта и неподходящий для его разработки коллектив, а также 
# субъективный подход всех лиц, оказывающих прямое или косвенное влияние. «Целого видения» ситуации 
# не получится: каждый участник будет смотреть на будущий проект «со своей колокольни». Вот почему 
# для гарантирующего однородность и адекватность реальности консенсуса необходимо до планирования 
# определить не только ответственных за него исполнителей, но и распределить между ними роли. Еще 
# одно обязательное требование к процессу — не просто найти максимум требований, но и обработать их:

# распределить по категориям;
# выявить первостепенные и вторичные, третичные и прочие по степени важности;
# подвергнуть анализу и т. д.
# Разумеется, подготовленный материал придется проверить на «жизнеспособность», а затем уже 
# разрабатывать на его основе пакет документов.

# Основные виды требований к плану
# Как правило, требования озвучиваются заказчиком бизнес-проекта, и они могут быть всего двух видов:

# функциональные (направлены на жизнеспособность проекта);
# остальные (факультативные).
# К первым (и самым существенным!) относятся требования, регламентирующие конкретные опции бизнеса и 
# его продукта. Ко вторым — видение результата с позиций его эффективности, эстетичности и других 
# качественных признаков.

# Не являются требованиями любые детали реализации проекта и его архитектуры, сведения о тестировании 
# и планировании, а также информация, касающаяся самого процесса реализации плана и разрабатывающей 
# его команды.

# Кстати, фактическое исполнение зафиксированных планом требований к проекту может не устроить 
# заказчика, не понимающего всех тонкостей реализации и не умеющего донести до ответственных 
# специалистов суть своих пожеланий. Во избежание такой ситуации, к организации диалога между 
# обеими сторонами следует подходить с максимальным вниманием, не допуская двусмысленности, неясностей.

# Сбор и обработка требований
# Сначала определяют круг участников, которых группируют по приоритетности. Понятно, что требования 
# владельца будущего бизнеса важнее пожеланий от наемных специалистов. При этом заказчик не всегда 
# является пользователем продукта!

# Вторым шагом может быть выстраивание иерархии самих требований. Затем, чтобы получить мнение всех 
# заинтересованных в будущем проекте лиц, их системно опрашивают. Для этого используют несколько 
# инструментов:

# простые (анкетирование, заполнение брифов, опросы);
# сложные (ассоциативные карточки, мозговой штурм, прототипирование и т. д.).
# Когда требования (а, вернее, документация по ним и матрица их отслеживания) получены, материал 
# обрабатывают (например, удаляют дубли), а затем передают на утверждение уполномоченному лицу.

# Совместимость плана управления требованиями в проекте PMBoK с Projecto
# Разработана универсальная система управления проектами на основе совместимости Projecto почти 
# со 100 % методологий. Для знакомства бесплатно предоставляется демоверсия сервиса.

# Изучите требования к функциональности и производительности вашего приложения. 

# В зависимости от них, определите, какие языки программирования 

# предоставляют необходимые инструменты и библиотеки.

#                  2. Опыт разработчиков: 

# Учтите опыт и навыки вашей команды разработчиков. 

# Если у вас есть специалисты, опытные в определенных языках программирования,
 
# то может быть логично выбрать тот язык, с которым они уже знакомы.

#                  3. Платформа и целевые устройства: 

# Учитывайте платформы, на которых будет работать ваше приложение. 

# Некоторые языки программирования и среды разработки подходят
 
# лучше для определенных платформ, например, Java для Android или Swift для iOS.

#                  4. Экосистема и сообщество разработчиков: 

# Посмотрите на доступные инструменты, поддержку и сообщество 

# разработчиков для выбранных языков программирования и среды разработки. 

# Наличие активного и поддерживаемого сообщества может значительно упростить 

# разработку и решение возникающих проблем.

# Ниже представлены некоторые популярные языки программирования 

# и среды разработки для приложений:

#          - Java и Android Studio: 

# Используются для разработки приложений под Android.

#           - Swift и Xcode: 

# Используются для разработки приложений под iOS.

#          - JavaScript и React Native: 

# Позволяют создавать приложения, работающие на разных платформах, 

# включая Android и iOS.

#          - Python и PyCharm: 

# Часто используются для разработки веб-приложений и приложений 

# с использованием искусственного интеллекта.

#           - C# и Visual Studio: 

# Используются для разработки приложений под платформу .NET.

#            - Kotlin и Android Studio: 

# Язык Kotlin может использоваться для разработки приложений под Android.

# Выбор языка программирования и среды разработки зависит от конкретного 

# проекта и требований команды разработчиков. 

# Прежде чем принимать окончательное решение, 

# рекомендуется провести некоторые исследования и обсудить 

# варианты с командой разработки.