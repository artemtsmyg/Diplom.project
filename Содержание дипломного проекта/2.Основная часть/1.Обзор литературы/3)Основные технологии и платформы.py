#            Основные технологии и платформы


#      Основные технологии и платформы разработки мобильных приложений включают:

#             1. Нативная разработка: 

# Использование языков программирования, специфичных для каждой платформы, 

# таких как Swift или Objective-C для iOS и Java или Kotlin для Android. 

# Нативная разработка обеспечивает наилучшую производительность 

# и интеграцию с аппаратными возможностями устройства, 

# но требует отдельной разработки для каждой платформы.

# Как нативная, так и кроссплатформенная разработка имеют свои особенности. Мы использовали 
# оба подхода в практике мобильного подразделения mobile.SimbirSoft. В числе преимуществ 
# нативной разработки можно отметить следующие:

# стабильная и быстрая работа приложения;
# максимальный срок жизни приложения;
# приложение более гибкое и масштабируемое, благодаря использованию «родных» инструментов;
# меньше ограничений в архитектуре и функциях;
# интерфейс в точности соответствует платформе.



#             2. Гибридная разработка: 

# Использование фреймворков, таких как React Native или Flutter, 

# которые позволяют разрабатывать приложения для нескольких платформ 

# с использованием общего кода. Гибридная разработка обеспечивает 

# более быструю и экономичную разработку, но может иметь ограничения 

# в производительности и доступе к некоторым возможностям устройства.

# Кроссплатформенные фреймворки «подгоняют» приложение под несколько операционных систем, поэтому 
# нет необходимости создавать уникальные элементы для каждой платформы. 
# В результате:

# нужно меньше специалистов;
# уходит меньше времени и ресурсов;
# скорость разработки повышается.

# Если логика приложения одинакова на всех платформах, а интерфейс простой, гибридная разработка 
# помогает быстрее вывести продукт на рынок. Мы рекомендуем такие фреймворки, как React Native и Flutter, 
# при следующих условиях:

# если в сжатые сроки нужно написать прототип приложения для нескольких платформ;
# если приложение берет всю информацию с сервера, логика реализована на сервере, а анимация и 
# интерфейс не имеют принципиального значения;
# если используется минимальное количество нативных возможностей, таких как push уведомления, 
# встроенные покупки, геолокация и т.п.;
# если допустима скромная производительность, а контент подгружается из интернета.

#                            3. Веб-приложения: 

# Веб-приложение — клиент-серверное приложение, в котором клиент взаимодействует с веб-сервером 
# при помощи браузера. Логика веб-приложения распределена между сервером и клиентом, хранение 
# данных осуществляется, преимущественно, на сервере, обмен информацией происходит по сети. 
# Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной 
# операционной системы пользователя, поэтому веб-приложения являются межплатформенными службами.
# Веб-приложения стали широко использоваться в конце 1990-х — начале 2000-х годов.

# Существенное преимущество построения веб-приложений для поддержки стандартных функций браузера 
# заключается в том, что функции должны выполняться независимо от операционной системы данного клиента. 
# Вместо того, чтобы писать различные версии для Microsoft Windows, Mac OS X, GNU/Linux и других 
# операционных систем, приложение создаётся один раз для произвольно выбранной платформы и на ней 
# разворачивается. Однако различная реализация, CSS, DOM и других спецификаций в браузерах может 
# вызвать проблемы при разработке веб-приложений и последующей поддержке. Кроме того, возможность 
# пользователя настраивать многие параметры браузера (например, размер шрифта, цвета, отключение 
# поддержки сценариев) может препятствовать корректной работе приложения.

# Другой (менее универсальный) подход заключается в использовании Adobe Flash, Silverlight или 
# Java-апплетов для полной или частичной реализации пользовательского интерфейса. Поскольку 
# большинство браузеров поддерживает эти технологии (как правило, с помощью плагинов), 
# Flash- или Java-приложения могут выполняться с легкостью. Так как они предоставляют программисту 
# больший контроль над интерфейсом, они способны обходить многие несовместимости в конфигурациях 
# браузеров, хотя несовместимость между Java- или Flash-реализациями на стороне клиента может 
# приводить к различным осложнениям.

# На 2015 год технологию Adobe Flash не поддерживают Chrome, Safari, и другие популярные браузеры[1].

# В связи с архитектурным сходством с традиционными клиент-серверными приложениями, в некотором роде 
# «толстыми» клиентами, существуют споры относительно корректности отнесения подобных систем 
# к веб-приложениям; альтернативный термин «полнофункциональное приложение интернета»

#                           Архитектура веб-приложений

# Веб-приложение состоит из клиентской и серверной частей, тем самым реализуя технологию «клиент-сервер».
# Клиентская часть реализует пользовательский интерфейс, формирует запросы к серверу и обрабатывает 
# ответы от него.
# Серверная часть получает запрос от клиента, выполняет вычисления, после этого формирует веб-страницу 
# и отправляет её клиенту по сети с использованием протокола HTTP.

# Само веб-приложение может выступать в качестве клиента других служб, например, базы данных или 
# другого веб-приложения, расположенного на другом сервере. Ярким примером веб-приложения является 
# система управления содержимым статей Википедии: множество её участников могут принимать участие 
# в создании сетевой энциклопедии, используя для этого браузеры своих операционных систем 
# (будь то Microsoft Windows, GNU/Linux или любая другая операционная система) и не загружая 
# дополнительных исполняемых модулей для работы с базой данных статей.

# В настоящее время набирает популярность новый подход к разработке веб-приложений, называемый Ajax. 
# При использовании Ajax страницы веб-приложения не перезагружаются целиком, а лишь догружают 
# необходимые данные с сервера, что делает их более интерактивными и производительными.

# Также в последнее время набирает большую популярность технология WebSocket, которая не требует 
# постоянных запросов от клиента к серверу, а создает двунаправленное соединение, при котором сервер 
# может отправлять данные клиенту без запроса от последнего. Таким образом появляется возможность 
# динамически управлять контентом в режиме реального времени.

# Для создания веб-приложений на стороне сервера используются разнообразные технологии и любые языки 
# программирования:

#            4. Платформы разработки приложений: 

# Существуют различные платформы разработки приложений, 

# такие как Android Studio для разработки приложений под Android, 

# Xcode для разработки приложений под iOS или интегрированные 

# среды разработки, такие как Visual Studio или IntelliJ IDEA, 

# которые поддерживают разработку для нескольких платформ.

# Важно выбрать подходящую технологию и платформу 

# в зависимости от требований проекта, 

# доступных ресурсов и опыта разработчиков.